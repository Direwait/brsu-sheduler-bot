# src/app/scheduler/bot_commands.py
from telegram import Update, KeyboardButton, ReplyKeyboardMarkup
from telegram.ext import ContextTypes, CommandHandler, MessageHandler, filters

from src.app.scheduler.api_logic import save_user_data, get_groups_by_fakultet_and_course, get_user_data, get_schedule, \
    format_schedule_message


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [KeyboardButton("–§–ò–ó–ú–ê–¢")]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text("–í—ã–±–µ—Ä–∏ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç", reply_markup=reply_markup)



async def handle_fakultet(update: Update, context: ContextTypes.DEFAULT_TYPE):
    fakultet = update.message.text
    user_id = update.effective_user.id

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–∫—É–ª—å—Ç–µ—Ç
    save_user_data(user_id, 'fakultet', fakultet)

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –∫—É—Ä—Å–æ–≤
    keyboard = [
        [KeyboardButton("1 –ö–£–†–°"), KeyboardButton("2 –ö–£–†–°")],
        [KeyboardButton("3 –ö–£–†–°"), KeyboardButton("4 –ö–£–†–°")],
        [KeyboardButton("–ú–ê–ì–ò–°–¢–†–ê–¢–£–†–ê"), KeyboardButton("–ù–ê–ó–ê–î")]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text(f"–§–∞–∫—É–ª—å—Ç–µ—Ç: {fakultet}\n–í—ã–±–µ—Ä–∏ –∫—É—Ä—Å:", reply_markup=reply_markup)


async def handle_course(update: Update, context: ContextTypes.DEFAULT_TYPE):
    course = update.message.text
    user_id = update.effective_user.id
    save_user_data(user_id, 'course', course)

    # üéØ –ü–û–õ–£–ß–ê–ï–ú –§–ê–ö–£–õ–¨–¢–ï–¢ –ò–ó –°–ï–°–°–ò–ò
    user_data = get_user_data(user_id)
    fakultet = user_data.get('fakultet')  # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π —Ñ–∞–∫—É–ª—å—Ç–µ—Ç

    # üéØ –ü–ï–†–ï–î–ê–ï–ú –§–ê–ö–£–õ–¨–¢–ï–¢ –ò –ö–£–†–°
    groups = get_groups_by_fakultet_and_course(fakultet, course)

    keyboard = []
    row = []
    for group in groups:
        row.append(KeyboardButton(group))
        if len(row) == 2:
            keyboard.append(row)
            row = []
    if row:
        keyboard.append(row)
    keyboard.append([KeyboardButton("–ù–ê–ó–ê–î")])

    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text(f"–§–∞–∫—É–ª—å—Ç–µ—Ç: {fakultet}\n–ö—É—Ä—Å: {course}\n–í—ã–±–µ—Ä–∏ –≥—Ä—É–ø–ø—É:", reply_markup=reply_markup)

async def handle_group(update: Update, context: ContextTypes.DEFAULT_TYPE):
    group = update.message.text
    user_id = update.effective_user.id

    user_data = get_user_data(user_id)
    if user_data:
        save_user_data(user_id, 'group', group)
        schedule = get_schedule(user_id, group, user_data['course'])
        save_user_data(user_id, 'schedule', schedule)

        if schedule:
            message = format_schedule_message(schedule, 'all')
            await update.message.reply_text(message)

        # –ò –ø–æ—Ç–æ–º –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –¥–Ω–µ–π
        await show_menu(update, schedule)
    else:
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö")

async def show_menu(update: Update, schedule):
    keyboard = [
        [KeyboardButton("–ü–ù"), KeyboardButton("–í–¢"), KeyboardButton("–°–†")],
        [KeyboardButton("–ß–¢"), KeyboardButton("–ü–¢"), KeyboardButton("–°–ë")],
        [KeyboardButton("–í–°–Ø –ù–ï–î–ï–õ–Ø"), KeyboardButton("–ù–ê–ó–ê–î")]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

    status = "‚úÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ" if schedule else "‚ùå –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"
    await update.message.reply_text(f"{status}\n–í—ã–±–µ—Ä–∏ –¥–µ–Ω—å:", reply_markup=reply_markup)

async def handle_day(update: Update, context: ContextTypes.DEFAULT_TYPE):
    day = update.message.text
    user_id = update.effective_user.id

    schedule = get_user_data(user_id, 'schedule')
    if schedule:
        day_map = {
            '–ü–ù': ['–ø–æ–Ω–µ–¥'],
            '–í–¢': ['–≤—Ç–æ—Ä–Ω–∏–∫'],
            '–°–†': ['—Å—Ä–µ–¥–∞'],
            '–ß–¢': ['—á–µ—Ç–≤–µ—Ä–≥'],
            '–ü–¢': ['–ø—è—Ç–Ω–∏—Ü–∞'],
            '–°–ë': ['—Å—É–±–±–æ—Ç–∞'],
            '–í–°–Ø –ù–ï–î–ï–õ–Ø': 'all'
        }

        # üéØ –£–ë–ò–†–ê–ï–ú 'all' –ö–ê–ö –ó–ù–ê–ß–ï–ù–ò–ï –ü–û –£–ú–û–õ–ß–ê–ù–ò–Æ
        days = day_map.get(day)
        if not days:
            await update.message.reply_text("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –¥–µ–Ω—å")
            return

        message = format_schedule_message(schedule, days)
        await update.message.reply_text(message)
    else:
        await update.message.reply_text("‚ùå –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ –≥—Ä—É–ø–ø—É")

async def handle_back(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await start(update, context)
def setup_handlers(application):
    application.add_handler(CommandHandler("start", start))
    application.add_handler(MessageHandler(filters.Text(["–§–ò–ó–ú–ê–¢"]), handle_fakultet))
    application.add_handler(MessageHandler(filters.Text(["1 –ö–£–†–°", "2 –ö–£–†–°", "3 –ö–£–†–°", "4 –ö–£–†–°", "–ú–ê–ì–ò–°–¢–†–ê–¢–£–†–ê"]), handle_course))
    application.add_handler(MessageHandler(filters.Regex(r'^[–ê-–Ø]+-\d+$'), handle_group))
    application.add_handler(MessageHandler(filters.Text(["–ü–ù", "–í–¢", "–°–†", "–ß–¢", "–ü–¢", "–°–ë", "–í–°–Ø –ù–ï–î–ï–õ–Ø"]), handle_day))
    application.add_handler(MessageHandler(filters.Text(["–ù–ê–ó–ê–î"]), handle_back))