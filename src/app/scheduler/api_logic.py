# src/app/scheduler/app_logic.py
import re

from src.app.service.exel_parser import parse_schedule_with_xlrd
from src.app.service.find_url.FileFinder import newest_files

user_sessions = {}

def save_user_data(user_id, key, value):
    if user_id not in user_sessions:
        user_sessions[user_id] = {}
    user_sessions[user_id][key] = value

def get_user_data(user_id, key=None):
    if user_id in user_sessions:
        if key:
            return user_sessions[user_id].get(key)
        return user_sessions[user_id]
    return None


"""–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç URL –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–∞"""
def get_fakultet_url(fakultet_name):
    url_map = {
        "–§–ò–ó–ú–ê–¢": "https://www.brsu.by/fiziko-matematicheskij-fakultet",
        # –î–æ–±–∞–≤—å –¥—Ä—É–≥–∏–µ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç—ã –∫–æ–≥–¥–∞ –±—É–¥—É—Ç
        # "–°–ü–û–†–¢–§–ê–ö": "https://www.brsu.by/sport-fakultet",
        # "–§–ò–õ–§–ê–ö": "https://www.brsu.by/filologicheskij-fakultet",
    }
    return url_map.get(fakultet_name)

def get_groups_by_fakultet_and_course(fakultet, course_type):
    fizmat_groups = {
        "1 –ö–£–†–°": ["–ú–ò-11", "–ú–ò-12", "–§–ò-11", "–ü–ú-11"],
        "2 –ö–£–†–°": ["–ú–ò-21", "–§–ò-21", "–ü–ú-21"],
        "3 –ö–£–†–°": ["–ú–ò-31", "–§–ò-31", "–ü–ú-31", "–ö–§-31"],
        "4 –ö–£–†–°": ["–ú–ò-41", "–§–ò-41", "–ü–ú-41", "–≠–ö-41", "–ö–§-41"],
        "–ú–∞–≥–∏—Å—Ç—Ä–∞—Ç—É—Ä–∞": [""]
    }

    sport_groups = {
        "1 –ö–£–†–°": ["–°–ü-11", "–°–ü-12", "–°–ü-13"],
        "2 –ö–£–†–°": ["–°–ü-21", "–°–ü-22", "–°–ü-23"],
        # ...
    }

    if fakultet == "–§–ò–ó–ú–ê–¢":
        return fizmat_groups.get(course_type, [])
    elif fakultet == "–°–ü–û–†–¢–§–ê–ö":
        return sport_groups.get(course_type, [])
    else:
        return []


def format_schedule_messages(schedule_data, days='all'):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≤ —Å–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è Telegram, –ø–æ –æ–¥–Ω–æ–º—É –Ω–∞ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å."""
    if not schedule_data:
        return ["‚ùå *–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ*"]

    messages = []  # –°–ø–∏—Å–æ–∫ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π

    for course_name, days_schedule in schedule_data.items():
        # –î–ª—è –∫–∞–∂–¥–æ–≥–æ –∫—É—Ä—Å–∞
        if days == 'all':
            days_to_show = list(days_schedule.keys())
        else:
            days_to_show = days

        for day in days_to_show:
            message = ""
            day_upper = day.upper()
            for schedule_day, lessons in days_schedule.items():
                if day_upper in schedule_day:
                    txt = schedule_day.upper()
                    message += f"\nüìÖ *{txt.replace('–ü–û–ù–ï–î', '–ü–û–ù–ï–î–ï–õ–¨–ù–ò–ö')}*\n"
                    message += "‚îÄ" * 30 + "\n"
                    has_lessons = False
                    lesson_count = 0

                    for i, lesson in enumerate(lessons, 1):
                        if lesson['lesson'] != "-" and lesson['lesson'].strip():
                            time_display = lesson['time'].replace('–ø–∞—Ä–∞', '‚è∞').replace('\n', ' ')
                            time_display = (time_display
                                            .replace('1 ', '1Ô∏è‚É£ ')
                                            .replace('2 ', '2Ô∏è‚É£ ')
                                            .replace('3 ', '3Ô∏è‚É£ ')
                                            .replace('4 ', '4Ô∏è‚É£ ')
                                            )
                            lesson_text = lesson['lesson']

                            message += f"\n{time_display}\n"

                            # üéØ –†–ê–ó–ë–ò–í–ê–ï–ú –ü–û –°–¢–†–û–ö–ê–ú
                            lines = lesson_text.split('\n')

                            for line in lines:
                                line = line.strip()
                                if line:

                                    # üéØ –ï–°–õ–ò –í –°–¢–†–û–ö–ï –ï–°–¢–¨ –í–†–ï–ú–Ø –ò –ü–û–î–ì–†–£–ü–ü–ê - –í–´–í–û–î–ò–ú –ö–ê–ö –ï–°–¢–¨

                                    time_match = re.search(r'(\d{1,2}\.\d{2})', line)
                                    subgroup_match = re.search(r'(\(\d+\))', line)

                                    if time_match and subgroup_match:
                                        message += f"{line}\n"
                                    elif subgroup_match:
                                        # –¢–æ–ª—å–∫–æ –ø–æ–¥–≥—Ä—É–ø–ø–∞ - –æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å
                                        message += f"   {line}\n"
                                    else:
                                        # üéØ –û–ë–´–ß–ù–ê–Ø –ü–ê–†–ê - –ö–†–ê–°–ò–í–û –§–û–†–ú–ê–¢–ò–†–£–ï–ú
                                        # –ò—â–µ–º –∞—É–¥–∏—Ç–æ—Ä–∏—é –≤ –∫–æ–Ω—Ü–µ (—Ü–∏—Ñ—Ä—ã)
                                        room_match = re.search(r'(\d+[–∞-—è]?)$', line)
                                        if room_match:
                                            room = room_match.group(1)
                                            # –£–±–∏—Ä–∞–µ–º –∞—É–¥–∏—Ç–æ—Ä–∏—é –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
                                            main_text = re.sub(r'\s*\d+[–∞-—è]?$', '', line).strip()
                                            message += f"üìö {main_text}\n"
                                            message += f"üè´ –ê—É–¥–∏—Ç–æ—Ä–∏—è: {room}\n"
                                        else:
                                            # –ù–µ—Ç –∞—É–¥–∏—Ç–æ—Ä–∏–∏ - –ø—Ä–æ—Å—Ç–æ –≤—ã–≤–æ–¥–∏–º
                                            message += f"üìå {line}\n"

                            has_lessons = True
                            lesson_count += 1

                    if has_lessons:
                        message += f"\nüìä –í—Å–µ–≥–æ –ø–∞—Ä: {lesson_count}\n"
                    else:
                        message += "\nüéâ –í—ã—Ö–æ–¥–Ω–æ–π –¥–µ–Ω—å!\n"
                    messages.append(message) # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Å–ø–∏—Å–æ–∫

    return messages if messages else ["‚ùå *–ù–µ—Ç –ø–∞—Ä –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –¥–Ω–∏*"]


"""–ü–æ–ª—É—á–∞–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —á–µ—Ä–µ–∑ —Ç–≤–æ–∏ —Ñ—É–Ω–∫—Ü–∏–∏"""
#–∏—Ç–æ–≥–æ–≤—ã–π –º–µ—Ç–æ–¥
def get_schedule(user_id, group_name, course_type):

    user_data = get_user_data(user_id)
    if not user_data:
        return {}

    fakultet = user_data.get('fakultet')
    if not fakultet:
        return {}

    # üéØ –ü–û–õ–£–ß–ê–ï–ú URL –î–õ–Ø –í–´–ë–†–ê–ù–ù–û–ì–û –§–ê–ö–£–õ–¨–¢–ï–¢–ê
    url = get_fakultet_url(fakultet)

    actual,sec = newest_files(url)


    course_map = {
        "1 –ö–£–†–°": "1 –∫—É—Ä—Å",
        "2 –ö–£–†–°": "2 –∫—É—Ä—Å",
        "3 –ö–£–†–°": "3 –∫—É—Ä—Å",
        "4 –ö–£–†–°": "4 –∫—É—Ä—Å",
        "–ú–ê–ì–ò–°–¢–†–ê–¢–£–†–ê": "–º–∞–≥–∏—Å—Ç—Ä–∞—Ç—É—Ä–∞"
    }
    sheet_type = course_map.get(course_type)
    return parse_schedule_with_xlrd(actual, group_name, sheet_type)


def get_all_users():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–ø–∏—é –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö —Å–µ—Å—Å–∏–π"""
    return user_sessions.copy()