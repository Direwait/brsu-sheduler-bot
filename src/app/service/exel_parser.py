
import xlrd
import requests
from io import BytesIO
from src.app.service.find_url.FileFinder import newest_files



"""–°–æ–∑–¥–∞–µ—Ç –º–∞—Ç—Ä–∏—Ü—É –¥–∞–Ω–Ω—ã—Ö —Å –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–º–∏ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–º–∏ —è—á–µ–π–∫–∞–º–∏ –¥–ª—è xlrd"""
def create_matrix_with_merged_cells_xlrd(sheet):
    # –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–µ–º –ø—É—Å—Ç—É—é –º–∞—Ç—Ä–∏—Ü—É
    data = []
    for row_idx in range(sheet.nrows):
        row = []
        for col_idx in range(sheet.ncols):
            row.append(sheet.cell_value(row_idx, col_idx))
        data.append(row)

    # –ó–∞–ø–æ–ª–Ω—è–µ–º –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–µ —è—á–µ–π–∫–∏
    for merged_range in sheet.merged_cells:
        rlo, rhi, clo, chi = merged_range
        top_left_value = sheet.cell_value(rlo, clo)

        # –ó–∞–ø–æ–ª–Ω—è–µ–º –≤—Å–µ —è—á–µ–π–∫–∏ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –∑–Ω–∞—á–µ–Ω–∏–µ–º –∏–∑ –≤–µ—Ä—Ö–Ω–µ–π –ª–µ–≤–æ–π
        for row_idx in range(rlo, rhi):
            for col_idx in range(clo, chi):
                if row_idx < len(data) and col_idx < len(data[row_idx]):
                    data[row_idx][col_idx] = top_left_value
    print(data)
    return data

"""–ü–∞—Ä—Å–∏–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–π –≥—Ä—É–ø–ø—ã"""
# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
def parse_group_schedule(data_matrix, group_name):

    # –ù–∞—Ö–æ–¥–∏–º –∫–æ–ª–æ–Ω–∫—É –≥—Ä—É–ø–ø—ã –≤ —Å—Ç—Ä–æ–∫–µ —Å –≥—Ä—É–ø–ø–∞–º–∏ (—Å—Ç—Ä–æ–∫–∞ 3)
    groups_row = data_matrix[3]
    group_col = None

    for col_idx, cell in enumerate(groups_row):
        if str(cell).strip() == group_name:
            group_col = col_idx
            break

    if group_col is None:
        print(f"‚ùå –ì—Ä—É–ø–ø–∞ {group_name} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return {}

    print(f"‚úÖ –ù–∞–π–¥–µ–Ω–∞ –≥—Ä—É–ø–ø–∞ {group_name} –≤ –∫–æ–ª–æ–Ω–∫–µ {group_col}")

    # –ù–∞—Ö–æ–¥–∏–º –¥–Ω–∏ –Ω–µ–¥–µ–ª–∏ (–∏—â–µ–º —Å—Ç—Ä–æ–∫–∏ —Å –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏ –¥–Ω–µ–π)
    days = {}
    day_patterns = ['–ü–û–ù–ï–î', '–í–¢–û–†–ù–ò–ö', '–°–†–ï–î–ê', '–ß–ï–¢–í–ï–†–ì', '–ü–Ø–¢–ù–ò–¶–ê', '–°–£–ë–ë–û–¢–ê']

    for row_idx, row in enumerate(data_matrix):
        if row and isinstance(row[0], str):
            cell_text = row[0].upper()
            for day in day_patterns:
                if day in cell_text:
                    days[day] = row_idx
                    print(f"üìÖ –ù–∞–π–¥–µ–Ω {day} –≤ —Å—Ç—Ä–æ–∫–µ {row_idx}")

    # –ü–∞—Ä—Å–∏–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –≥—Ä—É–ø–ø—ã
    schedule = {}

    for day_name, day_row_idx in days.items():
        day_lessons = []

        # –í—Å–µ–≥–¥–∞ –ø–æ–ª—É—á–∞–µ–º 4 –ø–∞—Ä—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –¥–Ω—è
        for offset in range(1, 5):  # 1-4 –ø–∞—Ä—ã
            row_idx = day_row_idx + offset
            time_slot = ""
            lesson_text = "-"  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø—Ä–æ—á–µ—Ä–∫

            if row_idx < len(data_matrix):
                row = data_matrix[row_idx]

                # –ü–æ–ª—É—á–∞–µ–º –≤—Ä–µ–º—è –ø–∞—Ä—ã
                if row and row[0]:
                    time_slot = str(row[0]).strip()

                # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥–º–µ—Ç –∏–∑ –∫–æ–ª–æ–Ω–∫–∏ –≥—Ä—É–ø–ø—ã
                if row and group_col < len(row) and row[group_col]:
                    lesson_data = row[group_col]
                    if str(lesson_data).strip():
                        lesson_text = str(lesson_data).strip()

            day_lessons.append({
                'time': time_slot,
                'lesson': lesson_text
            })

            print(f"   üïí {day_name}, –ü–∞—Ä–∞ {offset}: {time_slot} - {lesson_text}")

        schedule[day_name] = day_lessons

    return schedule


# –∏—Ç–æ–≥–æ–≤—ã–π –º–µ—Ç–æ–¥
def parse_schedule_with_xlrd(url, group_name, sheet_type=None)->dict:
    try:
        print(f"üîó –°–∫–∞—á–∏–≤–∞—é —Ñ–∞–π–ª –∏–∑: {url}")
        response = requests.get(url)
        response.raise_for_status()

        excel_data = BytesIO(response.content)
        workbook = xlrd.open_workbook(file_contents=excel_data.getvalue(), formatting_info=True)

        print(f"‚úÖ –§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω. –õ–∏—Å—Ç—ã: {workbook.sheet_names()}")

        all_schedules = {}

        for sheet_idx in range(workbook.nsheets):
            sheet = workbook.sheet_by_index(sheet_idx)
            sheet_name = sheet.name

            print(f"\nüéØ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –ª–∏—Å—Ç: '{sheet_name}'")

            # üéØ –ü–†–û–°–¢–û–ô –§–ò–õ–¨–¢–† –ü–û –¢–ò–ü–£ –õ–ò–°–¢–ê
            if sheet_type:
                sheet_lower = sheet_name.lower()
                type_lower = sheet_type.lower()

                if type_lower == "–º–∞–≥–∏—Å—Ç—Ä–∞—Ç—É—Ä–∞":
                    if not any(word in sheet_lower for word in ['–º', '–º–∞–≥–∏—Å—Ç—Ä', '–º–∞–≥–∏—Å—Ç—Ä–∞—Ç—É—Ä–∞']):
                        print(f"‚è≠Ô∏è  –ü—Ä–æ–ø—É—Å–∫–∞–µ–º (–∏—â–µ–º –º–∞–≥–∏—Å—Ç—Ä–∞—Ç—É—Ä—É)")
                        continue
                elif type_lower in ["1 –∫—É—Ä—Å", "2 –∫—É—Ä—Å", "3 –∫—É—Ä—Å", "4 –∫—É—Ä—Å"]:
                    if type_lower not in sheet_lower:
                        print(f"‚è≠Ô∏è  –ü—Ä–æ–ø—É—Å–∫–∞–µ–º (–∏—â–µ–º {sheet_type})")
                        continue

            data_matrix = create_matrix_with_merged_cells_xlrd(sheet)
            group_schedule = parse_group_schedule(data_matrix, group_name)

            if group_schedule:
                all_schedules[sheet_name] = group_schedule
                print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è {group_name}")

        return all_schedules

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return {}

def print_schedule(schedule_data, days='all'):
    """
    –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –ø–µ—á–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è

    Args:
        schedule_data: –¥–∞–Ω–Ω—ã–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
        days: —Å–ø–∏—Å–æ–∫ –¥–Ω–µ–π –∏–ª–∏ 'all' –¥–ª—è –≤—Å–µ—Ö
    """
    if not schedule_data:
        print("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è")
        return

    if days == 'all':
        days = list(schedule_data.keys())

    for day in days:
        day_upper = day.upper()
        for schedule_day, lessons in schedule_data.items():
            if day_upper in schedule_day:
                print(f"\nüìÖ {schedule_day}:")
                for i, lesson in enumerate(lessons, 1):
                    status = "‚úÖ" if lesson['lesson'] != "-" else "‚ùå"
                    print(f"   {status} {lesson['time']} - {lesson['lesson']}")
                break

# –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
def main():
    url = "https://www.brsu.by/fiziko-matematicheskij-fakultet"
    act, sec = newest_files(url)

    schedule = parse_schedule_with_xlrd(act, "–ú–ò-21", "2 –∫—É—Ä—Å")

    if schedule:
        for course_name, days_schedule in schedule.items():
            print(f"\n{'='*50}")
            print(f"üìò {course_name}:")
            print(f"{'='*50}")

            # –í—Å—è –Ω–µ–¥–µ–ª—è
            print_schedule(days_schedule, 'all')

            print_schedule(days_schedule, ['–ø–æ–Ω–µ–¥'])

    else:
        print(f"‚ùå –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")

if __name__ == "__main__":
    main()
